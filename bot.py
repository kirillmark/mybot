import settings
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, Filters, MessageHandler, CallbackQueryHandler


class BotCommands:
    care = '–£—Ö–æ–¥'
    food = '–ü–∏—Ç–∞–Ω–∏–µ'
    character = '–û–ø–∏—Å–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞'
    about_types = '–í—Å–µ –æ –ø–æ—Ä–æ–¥–∞—Ö'
    which_type = '–ö–∞–∫–æ–π –ø–æ—Ä–æ–¥—ã –∫–æ—Ç?'
    about_bot = '–ß—Ç–æ –º–æ–∂–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç?'

    def __getattr__(self, attr):
        if 'regex_' in attr:
            attr = attr.replace('regex_', '')
            return r'^' + getattr(self, attr).replace('?', r'\?') + r'$'


bc = BotCommands()

reply_keyboard = [
    [bc.care, bc.food],
    [bc.character, bc.about_types],
    [bc.which_type, bc.about_bot],
]
markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)


def greet_user(update, context):
    update.message.reply_text('–ü—Ä–∏–≤–µ—Ç, —è —Å–¥–µ–ª–∞–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ –≤ —É—Ö–æ–¥–µ –∑–∞ —Ç–≤–æ–∏–º –ª—é–±–∏–º—Ü–µ–º, —è –≥–æ—Ç–æ–≤,'
                              ' –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å!üò∫', reply_markup=markup)


def get_care(update, context):
    update.message.reply_text('–° –ø–æ—è–≤–ª–µ–Ω–∏–µ–º –≤ –¥–æ–º–µ –∫–æ—à–∫–∏ –º–Ω–æ–≥–æ–µ –≤ –ø—Ä–∏–≤—ã—á–Ω–æ–º —Ä–∞—Å–ø–æ—Ä—è–¥–∫–µ –¥–Ω—è –ø–æ–º–µ–Ω—è–µ—Ç—Å—è.'
                              ' –ü–∏—Ç–æ–º—Ü–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏—É—á–∏—Ç—å –∫ –ª–æ—Ç–∫—É –∏ –≥–∏–≥–∏–µ–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–æ—Ü–µ–¥—É—Ä–∞–º,'
                              ' –Ω–∞–ª–∞–¥–∏—Ç—å –ø–∏—Ç–∞–Ω–∏–µ –∏ –ø–æ–∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ —Ç–æ–º, —á—Ç–æ–±—ã –≤–Ω–µ—à–Ω—è—è —Å—Ä–µ–¥–∞ –±—ã–ª–∞ –¥–ª—è –Ω–µ–≥–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π.'
                              ' –ß—Ç–æ–±—ã —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, –∫–∞–∫ —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ –∫–æ—à–∫–æ–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ,'
                              ' —Å–ª–µ–¥—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.üò∫', reply_markup=markup)
    keyboard = [
        [
            InlineKeyboardButton("–ö–æ—Ç —É –º–µ–Ω—è –Ω–µ–¥–∞–≤–Ω–æ", callback_data="–ö–æ—Ç —É –º–µ–Ω—è –Ω–µ–¥–∞–≤–Ω–æ"),
            InlineKeyboardButton("–ö–æ—Ç —É –º–µ–Ω—è —É–∂–µ –¥–∞–≤–Ω–æ", callback_data="–ö–æ—Ç —É –º–µ–Ω—è —É–∂–µ –¥–∞–≤–Ω–æ"),
        ],
        [
            InlineKeyboardButton("–õ–µ—á–µ–Ω–∏–µ", callback_data="–õ–µ—á–µ–Ω–∏–µ"),
        ],
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    update.message.reply_text('–°–∫–∞–∂–∏—Ç–µ, –∫–æ–≥–¥–∞ —É –≤–∞—Å –ø–æ—è–≤–∏–ª—Å—è –∫–æ—Ç–µ–Ω–æ–∫?üò∫', reply_markup=reply_markup)


def get_nutrition(update, context):
    keyboard = [
        [
            InlineKeyboardButton("0-5", callback_data="0-5"),
            InlineKeyboardButton("5-10", callback_data="5-10"),
        ],
        [
            InlineKeyboardButton("10-12", callback_data="10-12"),
            InlineKeyboardButton("12+", callback_data="12+"),
        ],
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    update.message.reply_text("–°–∫–∞–∂–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç –≤–∞—à–µ–º—É –∫–æ—Ç—É?üò∫", reply_markup=reply_markup)


def character_description(update, context):
    update.message.reply_text('–•–∞—Ä–∞–∫—Ç–µ—Ä —É –∫–æ—Ç–∏–∫–∞ –º–æ–∂–Ω–æ –ø—Ä–µ–¥—É–≥–∞—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –æ–Ω –∫–æ—Ç–µ–Ω–æ–∫üò∫', reply_markup=markup)
    update.message.reply_text("–ï—Å–ª–∏ –≤—ã —Å –Ω–∏–º —á–∞—Å—Ç–æ –∏–≥—Ä–∞–µ—Ç–µ, –Ω–µ —Ä—É–≥–∞–µ—Ç–µ –∏ –Ω–µ –∫—Ä–∏—á–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ, –æ–Ω –≤—ã—Ä–∞—Å—Ç–µ—Ç –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–ºüò∫")
    update.message.reply_text("–ï—Å–ª–∏ –≤–∞—à –∫–æ—Ç–µ–Ω–æ–∫ –æ—Ö–æ—Ç–∏—Ç—Å—è –∑–∞ –≤–∞—à–∏–º–∏ –Ω–æ–≥–∞–º–∏, –æ—Ö–æ—Ç–Ω–æ –∏–≥—Ä–∞–µ—Ç –∏ –Ω–µ —Å–∏–¥–∏—Ç –±–µ–∑ –¥–µ–ª–∞,"
                              " —Ç–æ —É –≤–∞—Å –±—É–¥–µ—Ç –∫–æ—Ç-–æ—Ö–æ—Ç–Ω–∏–∫üò∫", reply_markup=markup)
    update.message.reply_text("–ï—Å–ª–∏ –≤—ã —á–∞—Å—Ç–æ –≥–ª–∞–¥–∏—Ç–µ –∫–æ—Ç–µ–Ω–∫–∞, –∏ –≤–æ—Å–ø–∏—Ç—ã–≤–µ—Ç–µ –µ–≥–æ, —Ç–æ –æ–Ω –≤—ã—Ä–∞—Å—Ç–µ—Ç–µ –ª–∞—Å–∫–æ–≤—ã–ºüò∫")
    update.message.reply_text("–ï—Å–ª–∏ –≤—ã –ø–ª–æ—Ö–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ –∫–æ—Ç–µ–Ω–∫—É, —Ä—É–≥–µ—Ç–µ –µ–≥–æ –∏ –∫—Ä–∏—á–∏—Ç–µ,"
                              " —Ç–æ –æ–Ω –≤—ã—Ä–µ—Å—Ç–µ—Ç–µ –∑–ª—ã–º –∏ —Å–≤–æ–µ–Ω—Ä–∞–≤–Ω—ã–º –∫–æ—Ç–æ–ºüò∫", reply_markup=markup)


def get_breed(update, context):
    update.message.reply_text('–î–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –ø–æ–¥–æ–π–¥—É—Ç —Ç–∞–∫–∏–µ –ø–æ—Ä–æ–¥—ã –∫–∞–∫ "–°–Ω–æ—É-—à—É", –ë—Ä–∏—Ç–∞–Ω—Å–∫–∞—è –∫–æ—Ä–æ—Ç–∫–æ—à–µ—Ä—Å—Ç–Ω–∞—è",'
                              ' "–ù–æ—Ä–≤–µ–∂—Å–∫–∞—è –ª–µ—Å–Ω–∞—è", "–Ø–ø–æ–Ω—Å–∫–∏–π –±–æ–±—Ç–µ–π–ª", "–®–æ—Ç–ª–∞–Ω–¥—Å–∫–∞—è –≤–∏—Å–ª–æ—É—Ö–∞—è"üò∫', reply_markup=markup)
    update.message.reply_text("–ü—Ä–∏ –¥–æ–ª–∂–Ω–æ–º –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–∏–æ–Ω–∏ –º–æ–≥—É—Ç –≤—ã—Ä–∞—Å—Ç–∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º–∏üò∫", reply_markup=markup)
    keyboard = [
        [
            InlineKeyboardButton("–î–∞, –¥–∞–≤–∞–π", callback_data="–î–∞, –¥–∞–≤–∞–π"),
            InlineKeyboardButton("–ù–µ—Ç, –Ω–µ –Ω–∞–¥–æ", callback_data="–ù–µ—Ç, –Ω–µ –Ω–∞–¥–æ"),
        ],
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–ú—ã –º–æ–∂–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º –ø–æ—Ä–æ–¥—ã –ø–æ —Ä–∞–∑–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–ºüò∫", reply_markup=reply_markup)


def get_what_breed_of_cat(update, context):
    update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—Ç–µ –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–æ—Ç–æ–º,"
                              " –∞ —è —Å –ø–æ–º–æ—â—å—é AI –æ–ø—Ä–µ–¥–µ–ª—é –µ–≥–æ –ø–æ—Ä–æ–¥—Éüò∫", reply_markup=markup)


def get_help(update, context):
    update.message.reply_text("–Ø –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Ç–µ–±–µ –≤ —É—Ö–æ–¥–µ –∑–∞ —Ç–≤–æ–∏–º –ª—é–±–∏–º—Ü–µ–º, —è –ø–æ–¥–∫–ª—é—á–µ–Ω –≤ —Ä–∞–∑–º—ã–º –º–µ–¥ —Å–∞–π—Ç–∞–º,"
                              " —Ñ–æ—Ä—É–º–∞–º –ª—é–±–∏—Ç–µ–ª–µ–π –∫–æ—Ç–æ–≤, –ø–æ—ç—Ç–æ–º—É –º–æ–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ 99.9% –≤–µ—Ä–Ω—ãüò∫\n"
                              "–í–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                              "/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
                              "/care - –∏–Ω—Ñ–æ –æ–± —É—Ö–æ–¥–µ\n"
                              "/nutrit - –∏–Ω—Ñ–æ –æ –ø–∏—Ç–∞–Ω–∏–∏\n"
                              "/descrip - —Ö–∞—Ä–∞–∫—Ç–µ—Ä\n"
                              "/breed - –≤—Å–µ –æ –ø–æ—Ä–æ–¥–∞—Ö\n"
                              "/wht_breed - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–∫–æ–π –ø–æ—Ä–æ–¥—ã –∫–æ—Ç", reply_markup=markup)


def buttons(update, context):
    query = update.callback_query
    query.answer()

    # query.edit_message_text(text=f"Selected option: {query.data}")
    if query.data == "–ö–æ—Ç —É –º–µ–Ω—è –Ω–µ–¥–∞–≤–Ω–æ":
        query.edit_message_text(text='–í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç "–ö–æ—Ç —É –º–µ–Ω—è –Ω–µ–¥–∞–≤–Ω–æ"üò∫')
        query.edit_message_text(text='–ü–µ—Ä–µ–µ–∑–¥ –≤ –Ω–æ–≤—ã–π –¥–æ–º —Å–æ–ø—Ä—è–∂–µ–Ω —Å –æ—Ç—ä–µ–º–æ–º –æ—Ç –º–∞—Ç–µ—Ä–∏ –∏ —Å–æ–ø–æ–º–µ—Ç–Ω–∏–∫–æ–≤.'
                                  ' –ü–æ—ç—Ç–æ–º—É –ø–µ—Ä–≤–æ–µ –≤—Ä–µ–º—è –∫–æ—Ç–µ–Ω–æ–∫ –±—É–¥–µ—Ç –∏—Å–ø—ã—Ç—ã–≤–∞—Ç—å —Å–∏–ª—å–Ω—ã–π —Å—Ç—Ä–µ—Å—Å –∏ –≤–µ—Å—Ç–∏ —Å–µ–±—è –±–µ—Å–ø–æ–∫–æ–π–Ω–æ,'
                                  ' –∑–∞–º–∫–Ω—É—Ç–æ –∏–ª–∏ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ.üê±')
    elif query.data == "–ö–æ—Ç —É –º–µ–Ω—è —É–∂–µ –¥–∞–≤–Ω–æ":
        query.edit_message_text(text='–í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç "–ö–æ—Ç —É –º–µ–Ω—è —É–∂–µ –¥–∞–≤–Ω–æ"üò∫')
        query.edit_message_text(text='–î–ª—è —Ç–µ—Ö —É –∫–æ–≥–æ –∫–æ—Ç —É–∂–µ –¥–∞–≤–Ω–æ –≤–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—É–Ω–∫—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–æ–±–ª—é–¥–∞—Ç—å:\n'
                                  '1. –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–¥–æ–±—Ä–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ;\n'
                                  '2. –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≥–∏–≥–∏–µ–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä;\n'
                                  '3. –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –æ—Ç–¥—ã—Ö–∞;\n'
                                  '4. —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω—É—é –≤–∞–∫—Ü–∏–Ω–∞—Ü–∏—é;\n'
                                  '5. –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ —Ç—É–∞–ª–µ—Ç–∞;\n'
                                  '6. –ø–ª–∞–Ω–æ–≤—ã–µ –æ—Å–º–æ—Ç—Ä—ã –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞.üê±')
    elif query.data == "–õ–µ—á–µ–Ω–∏–µ":
        query.edit_message_text(text='–ö–∞–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã —É –≤–∞—à–µ–≥–æ –∫–æ—Ç–∞?üê±')
    elif query.data == "0-5":
        query.edit_message_text(text="–î–ª—è –∫–æ—Ç–µ–Ω–∫–∞ –ø–æ–¥–æ–π–¥—É—Ç —Ç–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∫–∞–∫:\n"
                                     "1. –ú—è—Å–æ. –î–∞—é—Ç –≤ —Å—ã—Ä–æ–º, –æ—à–ø–∞—Ä–µ–Ω–Ω–æ–º –∏–ª–∏ –æ—Ç–≤–∞—Ä–Ω–æ–º –≤–∏–¥–µ\n"
                                     "2. –ü–µ—á–µ–Ω—å. –ú–∞–∫—Å–∏–º—É–º 2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é\n"
                                     "3. –ö–∞—à–∏. –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–∞–≤–∞—Ç—å –º–∞–Ω–Ω—É—é\n"
                                     "4. –û–≤–æ—â–∏. –ù–µ–ª—å–∑—è –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–æ–ø—É—Å—Ç–∏–º–æ –≤ —Å—ã—Ä–æ–º –∏–ª–∏ –æ—Ç–≤–∞—Ä–Ω–æ–º –≤–∏–¥–µ\n"
                                     "5. –ö—É—Ä–∏–Ω—ã–µ —è–π—Ü–∞. –î–ª—è –∫–æ—Ç—è—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏—à—å –∂–µ–ª—Ç–æ–∫, –Ω–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é\n"
                                     "6. –ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã.üê±")
    elif query.data == "5-10":
        query.edit_message_text(text='–î–ª—è –±–æ–ª–µ–µ —Å—Ç–∞—Ä—à–∏—Ö –∫–æ—Ç–æ–≤ –≤ –º–µ–Ω—é –ø–∏—Ç–æ–º—Ü–µ–≤ —Å–ª–µ–¥—É–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –º—è—Å–Ω—ã–µ —Å—É–±–ø—Ä–æ–¥—É–∫—Ç—ã,'
                                     ' —Ä—ã–±—É (–ø–æ –∂–µ–ª–∞–Ω–∏—é), –æ–≤–æ—â–∏, –∫—Ä—É–ø—ã,'
                                     ' –Ω–µ–∂–∏—Ä–Ω—É—é –∫–∏—Å–ª–æ–º–æ–ª–æ—á–Ω—É—é –ø—Ä–æ–¥—É–∫—Ü–∏—é (–µ—Å–ª–∏ –∂–∏–≤–æ—Ç–Ω–æ–µ –Ω–µ –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –µ–µ –µ—Å—Ç—å)'
                                     ' –∏ –≤–∏—Ç–∞–º–∏–Ω–Ω–æ-–º–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–ª–µ–∫—Å—ã (—Ç–æ–ª—å–∫–æ –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–≥–æ –≤—Ä–∞—á–∞).'
                                     ' –ù—É–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏ —Å–≤–µ–∂–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã.üê±')
    elif query.data == "10-12":
        query.edit_message_text(text="–î–ª—è –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã—Ö –∫–æ—Ç–æ–≤ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω —Ç–∞–∫–æ–π –∫–æ—Ä–º:\n"
                                     "–ù–µ–∂–∏—Ä–Ω–æ–µ –º—è—Å–æ. –ö—É—Ä–∏—Ü–∞, –∏–Ω–¥–µ–π–∫–∞ —Ç–µ–ª—è—Ç–∏–Ω–∞, –≥–æ–≤—è–¥–∏–Ω–∞, –Ω–µ–∂–∏—Ä–Ω—ã–µ —Å–æ—Ä—Ç–∞ –º–æ—Ä—Å–∫–æ–π —Ä—ã–±—ã.\n"
                                     "–ó–ª–∞–∫–∏. –ì—Ä–µ—á–∫–∞, —Ä–∏—Å, –ø–æ–ª–±–∞, –∫–∏–Ω–æ–∞, –±—É–ª–≥—É—Ä.\n"
                                     "–ö–∏—Å–ª–æ–º–æ–ª–æ—á–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è.\n"
                                     "–†—è–∂–µ–Ω–∫–∞, –∫–µ—Ñ–∏—Ä, —Ç–≤–æ—Ä–æ–≥ –¥–æ 8% –∂–∏—Ä–Ω–æ—Å—Ç–∏.üê±")
    elif query.data == "12+":
        query.edit_message_text(text='–ü—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ –Ω–µ–±–æ–ª—å—à–∏–µ –ø–æ—Ä—Ü–∏–∏ –≤–∫—É—Å–Ω–æ–π –µ–¥—ã –∏–ª–∏ –ø–µ—Ä–µ–∫—É—Å—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä,'
                                     ' —Ç—É–Ω—Ü–∞ –∏–ª–∏ –≤–∞—Ä–µ–Ω–æ–π –∫—É—Ä–∏—Ü—ã.'
                                     ' –î–∞–≤–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ–±–æ–ª—å—à–∏—Ö –ø–æ—Ä—Ü–∏–π –≤ –¥–µ–Ω—å –≤–º–µ—Å—Ç–æ –æ–¥–Ω–æ–π –∏–ª–∏ –¥–≤—É—Ö –±–æ–ª—å—à–∏—Ö –ø–æ—Ä—Ü–∏–π.'
                                     ' –í–ª–∞–∂–Ω—ã–π –∫–æ—Ä–º –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ —Å—É—Ö–æ–≥–æ,'
                                     ' —Ç–∞–∫ –∫–∞–∫ –≤ –Ω–µ–º –±–æ–ª—å—à–µ –≤–æ–¥—ã –∏ –∫–æ—à–∫–µ –ª–µ–≥—á–µ –∂–µ–≤–∞—Ç—å –∏ –≥–ª–æ—Ç–∞—Ç—å.üê±')
    elif query.data == '–î–∞, –¥–∞–≤–∞–π':
        keyboard = [
            [
                InlineKeyboardButton("–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π", callback_data="–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π"),
                InlineKeyboardButton("–ö–æ—Ç-–æ—Ö–æ—Ç–Ω–∏–∫", callback_data="–ö–æ—Ç-–æ—Ö–æ—Ç–Ω–∏–∫"),
            ],
            [
                InlineKeyboardButton("–õ–∞—Å–∫–æ–≤—ã–π", callback_data="–õ–∞—Å–∫–æ–≤—ã–π"),
                InlineKeyboardButton("–°–≤–æ–µ–Ω—Ä–∞–≤–Ω—ã–π", callback_data="–°–≤–æ–µ–Ω—Ä–∞–≤–Ω—ã–π"),
            ],
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(text='–ö–∞–∫—É—é –ø–æ—Ä–æ–¥—É –≤—ã —Ö–æ—Ç–∏—Ç–µ?üê±', reply_markup=reply_markup)
    elif query.data == '–ù–µ—Ç, –Ω–µ –Ω–∞–¥–æ':
        query.edit_message_text(text='–•–æ—Ä–æ—à–æ, —è –º–æ–≥—É –µ—â–µ —á–µ–º-—Ç–æ –≤–∞–º –ø–æ–º–æ—á—å?üê±')
    elif query.data == "–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π":
        update.callback_query.message.reply_text('–í—ã –≤—ã–±—Ä–∞–ª–∏ "–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π"')
        chat_id = update.effective_chat.id
        update.callback_query.send_photo(chat_id, open('images_for_friendly/Ragdoll.jpg', 'rb'))
    elif query.data == "–ö–æ—Ç-–æ—Ö–æ—Ç–Ω–∏–∫":
        update.callback_query.message.reply_text('–í—ã –≤—ã–±—Ä–∞–ª–∏ "–ö–æ—Ç-–æ—Ö–æ—Ç–Ω–∏–∫"')
    elif query.data == "–õ–∞—Å–∫–æ–≤—ã–π":
        update.callback_query.message.reply_text('–í—ã –≤—ã–±—Ä–∞–ª–∏ "–õ–∞—Å–∫–æ–≤—ã–π"')
    elif query.data == "–°–≤–æ–µ–Ω—Ä–∞–≤–Ω—ã–π":
        update.callback_query.message.reply_text('–í—ã –≤—ã–±—Ä–∞–ª–∏ "–°–≤–æ–µ–Ω—Ä–∞–≤–Ω—ã–π"')


def main():

    mybot = Updater(settings.API_KEY, use_context=True)

    dp = mybot.dispatcher
    dp.add_handler(CommandHandler("start", greet_user))
    dp.add_handler(MessageHandler(Filters.regex(bc.regex_care), get_care))
    dp.add_handler(MessageHandler(Filters.regex(bc.regex_food), get_nutrition))
    dp.add_handler(MessageHandler(Filters.regex(bc.regex_character), character_description))
    dp.add_handler(MessageHandler(Filters.regex(bc.regex_about_types), get_breed))
    dp.add_handler(MessageHandler(Filters.regex(bc.regex_which_type), get_what_breed_of_cat))
    dp.add_handler(MessageHandler(Filters.regex(bc.regex_about_bot), get_help))
    dp.add_handler(CallbackQueryHandler(buttons))



    mybot.start_polling()
    mybot.idle()


if __name__ == '__main__':
    main()
